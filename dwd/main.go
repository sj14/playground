package main

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"

	"gorm.io/driver/postgres"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
)

func main() {
	data, err := request()
	if err != nil {
		log.Fatalln(err)
	}

	log.Printf("%+v\n", data)

	dbInsert("TODO", data)
}

func dbInsert(dsn string, data Stations) {
	db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})
	if err != nil {
		panic("failed to connect database")
	}

	// Migrate the schema
	if err := db.AutoMigrate(&Stations{}); err != nil {
		log.Fatalf("failed auto migration: %v\n", err)
	}

	tx := db.Clauses(clause.OnConflict{
		UpdateAll: true,
	}).Create(&data)

	tx.Commit()
	// tx.Error
}

type Stations map[string]Station

type Station struct {
	Forecast1 struct {
		StationID                    string `json:"stationId"`
		Start                        int    `json:"start"`
		TimeStep                     int    `json:"timeStep"`
		Temperature                  []int  `json:"temperature"`
		TemperatureStd               []int  `json:"temperatureStd"`
		WindSpeed                    string `json:"windSpeed"`
		WindDirection                string `json:"windDirection"`
		WindGust                     string `json:"windGust"`
		Icon                         []int  `json:"icon"`
		PrecipitationTotal           []int  `json:"precipitationTotal"`
		PrecipitationProbablity      string `json:"precipitationProbablity"`
		PrecipitationProbablityIndex string `json:"precipitationProbablityIndex"`
	} `json:"forecast1"`
	Forecast2 struct {
		StationID                    string `json:"stationId"`
		Start                        int    `json:"start"`
		TimeStep                     int    `json:"timeStep"`
		Temperature                  []int  `json:"temperature"`
		TemperatureStd               []int  `json:"temperatureStd"`
		WindSpeed                    string `json:"windSpeed"`
		WindDirection                string `json:"windDirection"`
		WindGust                     string `json:"windGust"`
		Icon                         []int  `json:"icon"`
		PrecipitationTotal           []int  `json:"precipitationTotal"`
		PrecipitationProbablity      string `json:"precipitationProbablity"`
		PrecipitationProbablityIndex string `json:"precipitationProbablityIndex"`
	} `json:"forecast2"`
	ForecastStart string `json:"forecastStart"`
	Days          []struct {
		StationID      string `json:"stationId"`
		DayDate        string `json:"dayDate"`
		TemperatureMin int    `json:"temperatureMin"`
		TemperatureMax int    `json:"temperatureMax"`
		Icon           int    `json:"icon"`
		Icon1          string `json:"icon1"`
		Icon2          string `json:"icon2"`
		Precipitation  int    `json:"precipitation"`
		WindSpeed      int    `json:"windSpeed"`
		WindGust       int    `json:"windGust"`
		WindDirection  int    `json:"windDirection"`
		Sunshine       int    `json:"sunshine"`
	} `json:"days"`
	Warnings []struct {
	} `json:"warnings"`
	ThreeHourSummaries string `json:"threeHourSummaries"`
}

func request() (Stations, error) {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	// curl -X 'GET' \
	//   'https://dwd.api.proxy.bund.dev/v30/stationOverviewExtended?stationIds=10865,G005' \
	//   -H 'accept: application/json'

	req, err := http.NewRequest(http.MethodGet, "https://dwd.api.proxy.bund.dev/v30/stationOverviewExtended?stationIds=13670,H419", nil)
	if err != nil {
		return Stations{}, fmt.Errorf("failed creating request: %v", err)
	}
	req.Header.Set("Accept", "application/json")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		return Stations{}, fmt.Errorf("failed sending request: %v", err)
	}
	defer func() {
		if err := resp.Body.Close(); err != nil {
			log.Printf("failed closing body: %v\n", err)
		}
	}()

	result := Stations{}

	// result.StationID = make(map[string]StationID)
	// result.StationSubID = make(map[string]SubID)

	respBytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return Stations{}, fmt.Errorf("failed reading response: %v", err)
	}

	if err := json.Unmarshal(respBytes, &result); err != nil {
		return Stations{}, fmt.Errorf("failed unmarshalling response: %v", err)
	}

	return result, nil
}
